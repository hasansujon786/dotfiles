{
  "array from & map": {
    "prefix": "fromMap",
    "body": [
      "Array.from({ length: ${1:5} }, (_, i) => i + 1).map((item, idx) => ${0:// map item here})"
    ],
    "description": "create an array programmatically and map over"
  },
  "array from": {
    "prefix": "from",
    "body": ["Array.from({ length: ${1:5} }, (_, i) => ${2:i + 1})"],
    "description": "create an array programmatically"
  },
  "array from keys": {
    "prefix": "fromCount",
    "body": ["Array.from(Array(5).keys());"],
    "description": "create an array programmatically"
  },
  "log": {
    "prefix": "cl",
    "body": "console.log($0)",
    "description": "get console log"
  },
  "export all": {
    "prefix": "exFrom",
    "body": "export * from './$0'",
    "description": "export all"
  },
  "export default": {
    "prefix": "exFromDefault",
    "body": "export { default as ${2:modulename} } from './$1'",
    "description": "export as default"
  },
  "numfromrange": {
    "prefix": "randomFromRange",
    "body": "Math.floor(Math.random() * (max - min + 1) + min)",
    "description": "get number from a range"
  },
  "wait promise": {
    "prefix": "waitpromise",
    "body": [
      "async function wait(time: number) {",
      "  return await new Promise((resolve) => setTimeout(resolve, time));",
      "}"
    ],
    "description": "await a promise for given time"
  },
  "basic function": {
    "prefix": "fn",
    "body": ["const ${1:fn_name} = () => {\n  ${0}\n}"],
    "description": "Prettify any nested type"
  },
  "async function": {
    "prefix": "fna",
    "body": ["const ${1:fn_name} = async () => {\n  ${0}\n}"],
    "description": "Prettify any nested type"
  }
}
