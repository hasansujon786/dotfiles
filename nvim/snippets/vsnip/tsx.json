{
  "ComponentPropsWithoutRef": {
    "prefix": "propsComponentPropsWithoutRef",
    "body": "React.ComponentPropsWithoutRef<'button'>",
    "description": "Props with html element"
  },
  "ComponentProps": {
    "prefix": "propsComponent",
    "body": "React.ComponentProps<typeof MyComponent>",
    "description": "Props from a component"
  },
  "listComponent": {
    "prefix": "listComponent",
    "body": [
      "interface ListProps<T> {",
      "  data: T[];",
      "  renderItem: (item: T, index: number) => React.ReactNode;",
      "}",
      "",
      "const List = <T,>({data, renderItem}: ListProps<T>) => {",
      "  return (",
      "    <View>",
      "      {data.map((itemData, index) => (",
      "        <View key={index}>{renderItem(itemData, index)}</View>",
      "      ))}",
      "    </View>",
      "  );",
      "};"
    ],
    "description": "Render list component with generic"
  },
  "forwardRefComponent": {
    "prefix": "refComponent",
    "body": [
      "export const ${1:${TM_FILENAME_BASE}} = React.forwardRef<",
      "  RefType,",
      "  PropsType",
      ">((props, ref) => {",
      "  return <Input ref={ref} />",
      "})",
      "",
      "${1:${TM_FILENAME_BASE}}.displayName = '${1:${TM_FILENAME_BASE}}'"
    ],
    "description": "forward ref snippet"
  }
}
