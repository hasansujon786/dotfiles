{
  "interfactProps": {
    "prefix": "propsic",
    "body": "interface Props extends React.ComponentPropsWithoutRef<'div'>  { }",
    "description": "Props with html element ref"
  },
  "typeProps": {
    "prefix": "propstype",
    "body": "type Props = React.ComponentPropsWithoutRef<'button'> & {}",
    "description": "Props with html element ref"
  },
  "ComponentProps": {
    "prefix": "propsComponent",
    "body": "React.ComponentProps<typeof MyComponent>",
    "description": "Props from a component"
  },
  "listcomp": {
    "prefix": "listcomp",
    "body": [
      "interface ListProps<T> {",
      "  data: T[];",
      "  renderItem: (item: T, index: number) => React.ReactNode;",
      "}",
      "",
      "const List = <T,>({data, renderItem}: ListProps<T>) => {",
      "  return (",
      "    <View>",
      "      {data.map((itemData, index) => (",
      "        <View key={index}>{renderItem(itemData, index)}</View>",
      "      ))}",
      "    </View>",
      "  );",
      "};"
    ],
    "description": "Render list component with generic"
  },
  "forwardRefComp": {
    "prefix": "forwardRefComp",
    "body": [
      "const RefComp = React.forwardRef<RefType, PropsType>(",
      "  function _RefComp(props, ref) {",
      "    return <Input ref={ref}/>",
      "  },",
      ");"
    ],
    "description": "forward ref snippet"
  }
}
