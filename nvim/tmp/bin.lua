-- _G.nvimTreeEnter = function()
--   vim.cmd('highlight! Cursor blend=100')
--   vim.opt.guicursor = { 'n:Cursor/lCursor', 'v-c-sm:block', 'i-ci-ve:ver25', 'r-cr-o:hor2' }
--   P('foo')
-- end
-- _G.nvimTreeLeave = function()
--   vim.cmd('highlight! Cursor blend=NONE')
--   vim.opt.guicursor = { 'n-v-c-sm:block', 'i-ci-ve:ver25', 'r-cr-o:hor20' }
--   P('moo')
-- end
-- local function init(info)
--   nvimTreeEnter()
--   utils.augroup('NvimTreeCursor')(function(autocmd)
--     autocmd({ 'WinLeave', 'BufLeave' }, nvimTreeLeave, { buffer = info.buf })
--     autocmd('WinEnter', nvimTreeEnter, { buffer = info.buf })
--     -- autocmd('FileType', 'setlocal foldlevel=0', { pattern = 'vim' })
--   end)
-- end
-- autocmd('FileType', init, { pattern = 'NvimTree' })

-- change alacritty config on vim enter
-- This is your alacritty.yml
-- 01 | # Window Customization
-- 02 | window:
-- 03 |   dimensions:
-- 04 |     columns: 100
-- 05 |     lines: 25
-- 06 |   padding:
-- 07 |     x: 20
-- 08 |     y: 20
-- 09 |   # decorations: none
-- 10 |   dynamic_title: true
-- 12 |   startup_mode: Windowed # Maximized Fullscreen
-- 13 | background_opacity: 0.92
-- function Sad(line_nr, from, to, fname)
--   vim.cmd(string.format("silent !sed -i '%ss/%s/%s/' %s", line_nr, from, to, fname))
-- end
-- function IncreasePadding()
--   foo('19', 0, 20, '~/dotfiles/alacritty/alacritty.windows.yml')
--   foo('20', 0, 20, '~/dotfiles/alacritty/alacritty.windows.yml')
-- end
-- function DecreasePadding()
--   Sad('19', 20, 0, '~/dotfiles/alacritty/alacritty.windows.yml')
--   Sad('20', 20, 0, '~/dotfiles/alacritty/alacritty.windows.yml')
-- end
-- vim.cmd[[
--   augroup ChangeAlacrittyPadding
--    au!
--    au VimEnter * lua DecreasePadding()
--    au VimLeavePre * lua IncreasePadding()
--   augroup END
-- ]]

-- local neoscroll = require('neoscroll')
-- neoscroll.setup()
-- local scroll_timer = vim.loop.new_timer()
-- local lines_to_scroll = 0
-- local cmd = vim.cmd
-- local function move_cursor_to_center(isCursorAboveCenter, def, callback)
--   lines_to_scroll = def
--   local function fooo()
--     if lines_to_scroll <= 0 then
--       scroll_timer:stop()
--       if callback ~= nil then
--         callback()
--       end
--       return
--     end
--     lines_to_scroll = lines_to_scroll - 1

--     if isCursorAboveCenter then
--       cmd([[norm! j]])
--     else
--       cmd([[norm! k]])
--     end
--   end

--   scroll_timer:start(1, 1, vim.schedule_wrap(fooo))
-- end
-- local function scroll_to(to)
--   neoscroll.scroll(to, true, 80, ease) -- defalut scroll
-- end

-- -- function Foo()
-- --   local isCursorAtCenter, isCursorAboveCenter, def = require('hasan.utils.ui.cursorline').cur_pos()
-- --   if not isCursorAtCenter then
-- --     moveCursonToCenter(isCursorAboveCenter, def)
-- --   end
-- -- end

-- keymap({ 'n', 'v' }, '<C-d>', function()
--   local cursor_at_center, cursor_at_top, differ, vp_lines = require('hasan.utils.ui.cursorline').cur_pos()

--   if vp_lines <= vim.wo.scroll then
--     scroll_to(vim.wo.scroll)
--     return
--   end

--   if not cursor_at_center and cursor_at_top then
--     move_cursor_to_center(cursor_at_top, differ, function() scroll_to(vim.wo.scroll - differ) end)
--     return
--   end

--   if not cursor_at_center and not cursor_at_top then
--     cmd([[norm! zz]])
--   end
--   scroll_to(vim.wo.scroll)
-- end)
-- keymap({ 'n', 'v' }, '<C-u>', function()
--   local cursor_at_center, cursor_at_top, differ, vp_lines = require('hasan.utils.ui.cursorline').cur_pos()

--   if vp_lines < vim.wo.scroll then
--     cmd([[norm! zz]])
--     scroll_to(-vim.wo.scroll)
--     return
--   end

--   if not cursor_at_center and not cursor_at_top then
--     move_cursor_to_center(cursor_at_top, differ, function()
--       cmd([[norm! zz]])
--       scroll_to(-(vim.wo.scroll - differ))
--     end)
--     return
--   end

--   if not cursor_at_center and cursor_at_top then
--     cmd([[norm! zz]])
--   end
--   scroll_to(-vim.wo.scroll)
-- end)
